name: Publish multiarch images on ghcr.io
on:
  push:
    branches:
      - 'master'
    tags:
      - '*'

env:
  PGVERSION: 15
  IMAGE_NAME: ${{ github.repository }}

jobs:
  publish:
    name: Build and push Spilo multiarch images for pg14
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      packages: 'write'
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7

    - name: Install flake8 and docker-compose
      run: python -m pip install flake8 docker-compose==1.17.1

    - name: Derive spilo image name
      id: image
      working-directory: postgres-appliance
      run: |
        PGVERSION=$(sed -n 's/^ARG PGVERSION=\([1-9][0-9]*\).*$/\1/p' Dockerfile)
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$PGVERSION:${GITHUB_REF/refs\/tags\//}"
        echo "NAME=$IMAGE" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Dockerhub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASS }}

    - name: Build and export to local docker for testing
      uses: docker/build-push-action@v2
      with:
        context: "postgres-appliance/"
        load: true
        tags: ${{ steps.image.outputs.NAME }}
        build-args: PGVERSION=${{ env.PGVERSION }}

    - name: Test spilo docker image 
      env:
        SPILO_TEST_IMAGE: "${{ steps.image.outputs.NAME }}"
      run: |
        bash postgres-appliance/tests/test_spilo.sh 

    
    - name: Workspace Notification
      uses: DTherHtun/google-chat-action@v0.9
      if: always()
      with:
        project: ${{ github.repository }}
        commit: "${{ github.event.head_commit.message }}" # ${{ steps.meta.outputs.tags }} ${{ steps.meta-frontend.outputs.tags }}
        branch: ${{ github.ref }}
        status: ${{ job.status }}
        actionid: ${{ github.repository }}/runs/${{ github.run_id }}
        webhook: "${{ secrets.GOOGLE_NOTIFICATION_WEBHOOK }}"
